<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on 码农明明桑</title>
    
    
    
    <link>https://isming.me/tags/android/</link>
    <description>Recent content in android on 码农明明桑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 17 Jan 2024 23:02:30 +0800</lastBuildDate>
    
	<atom:link href="https://isming.me/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Passkey在Android端的应用实践</title>
      <link>https://isming.me/2024-01-17-android-passkey/</link>
      <pubDate>Wed, 17 Jan 2024 23:02:30 +0800</pubDate>
      
      <guid>https://isming.me/2024-01-17-android-passkey/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Passkey，中文名通行密钥，他是WebAuthn的一部分，由FIDO联盟开发，可以做到让用户不使用用户名和密码，来直接验证身份。在2022年的WWDC上，Apple正式宣布了对Passkey的支持，当前10月份，google也宣布了对于passkey的支持。目前已经有一些应用支持了passkey，包括谷歌，微软，github，whatsapp等。最近在我们的Android应用上集成Passkey踩了很多的坑，简单记录一下。
&lt;img loading=&#39;lazy&#39; decoding=&#34;async&#34; src=&#34;https://isming.me/images/what-is-fido-fingerprint-authenticator.svg&#34; alt=&#34;Passkey&#34;  /&gt;&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>记解决MaterialButton背景颜色与设置值不同</title>
      <link>https://isming.me/2024-01-04-android-material-color-issue/</link>
      <pubDate>Thu, 04 Jan 2024 22:02:30 +0800</pubDate>
      
      <guid>https://isming.me/2024-01-04-android-material-color-issue/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;最近的开发过程中，因为设计的风格采用了Android的Material风格，因此我们在项目开发过程中也使用了Android 的Material组件和主题，但是开发过程中法使用MaterialButton的时候，我们给按钮设置的背景颜色和实际展示的背景颜色不一样。网上搜索了一番也没找到原因，于是便开始查阅MateriButton的代码。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>简单聊聊Android Architecture Componets</title>
      <link>https://isming.me/2017-05-18-android-architecture-components-guide/</link>
      <pubDate>Thu, 18 May 2017 20:01:38 +0800</pubDate>
      
      <guid>https://isming.me/2017-05-18-android-architecture-components-guide/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Google IO大会进行中，本次大会Android最大的新闻当属Android O以及Kotlin被官方认可。我发现了原来还有发布官方的架构库，以及推荐使用指南，分享给大家。&lt;/p&gt;
&lt;h2 id=&#34;架构原则&#34;&gt;架构原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关注分离&lt;/li&gt;
&lt;li&gt;模型驱动UI,优先持久化模型&lt;/li&gt;
&lt;/ul&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>聊聊Android N开始支持的Lambda</title>
      <link>https://isming.me/2016-09-13-android-lambda/</link>
      <pubDate>Tue, 13 Sep 2016 20:39:03 +0800</pubDate>
      
      <guid>https://isming.me/2016-09-13-android-lambda/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Android N 正式版已经发布了。对于开发者来说一个重大的更新是对于Java支持到了Java8，其中一点就是支持Lambda。我们就来聊聊什么是lambda，怎么在Android中使用。&lt;/p&gt;
&lt;h3 id=&#34;什么是lambda&#34;&gt;什么是lambda&lt;/h3&gt;
&lt;p&gt;Lambda 可以理解为匿名函数,帮助我们写出更加简洁的代码。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>小红书Android客户端演进之路</title>
      <link>https://isming.me/2016-08-08-red-android-evolution/</link>
      <pubDate>Mon, 08 Aug 2016 19:13:00 +0800</pubDate>
      
      <guid>https://isming.me/2016-08-08-red-android-evolution/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;小红书Android客户端第一个版本于2014年8月8日发布，转眼到了2016年8月8日，小红书Android版本发版两周年。趁机回顾一下小红书的Android版本，两年中我们踩过很多坑，收获很多经验，分享出来与大家共勉。
小红书从最初1.0到现在目前4.7版本，历经两年，安装包从原先的5M发展到现在的17M，产品模块也从原先的只有社区模块发展到了具有社区和电商两个大模块。App包含社区、电商、支付、推送、直播、统计等各种功能和模块，那么开始吧。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#39;lazy&#39; decoding=&#34;async&#34; src=&#34;https://isming.me/images/xingin_banner1.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Path和Property Animation配合让线条动起来</title>
      <link>https://isming.me/2016-06-07-path-property-animation/</link>
      <pubDate>Tue, 07 Jun 2016 14:03:39 +0800</pubDate>
      
      <guid>https://isming.me/2016-06-07-path-property-animation/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;之前做过一个图上标签但是动画样式不太好看，经过查找资料发现了一种全新的思路来实现动画，流畅的让标签的线显示和隐藏，示例如下，就在这里说一说。本文会涉及到Path，Property Animation, PathEffect, PathMeasure。我们开始一一道来。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Android系统更改状态栏字体颜色</title>
      <link>https://isming.me/2016-01-09-chang-android-statusbar-text-color/</link>
      <pubDate>Sat, 09 Jan 2016 00:41:39 +0800</pubDate>
      
      <guid>https://isming.me/2016-01-09-chang-android-statusbar-text-color/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;随着时代的发展，Android的状态栏都不是乌黑一片了，在Android4.4之后我们可以修改状态栏的颜色或者让我们自己的View延伸到状态栏下面。我们可以进行更多的定制化了，然而有的时候我们使用的是淡色的颜色比如白色，由于状态栏上面的文字为白色，这样的话状态栏上面的文字就无法看清了。因此本文提供一些解决方案，可以是MIUI6+,Flyme4+，Android6.0+支持切换状态栏的文字颜色为暗色。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Android WebView 上传文件支持全解析</title>
      <link>https://isming.me/2015-12-21-android-webview-upload-file/</link>
      <pubDate>Mon, 21 Dec 2015 20:02:30 +0800</pubDate>
      
      <guid>https://isming.me/2015-12-21-android-webview-upload-file/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;默认情况下情况下，使用Android的WebView是不能够支持上传文件的。而这个，也是在我们的前端工程师告知之后才了解的。因为Android的每个版本WebView的实现有差异，因此需要对不同版本去适配。花了一点时间，参考别人的代码，这个问题已经解决，这里把我踩过的坑分享出来。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Android WebView使用的技巧与一些坑</title>
      <link>https://isming.me/2015-10-18-webview-use/</link>
      <pubDate>Sun, 18 Oct 2015 17:10:09 +0800</pubDate>
      
      <guid>https://isming.me/2015-10-18-webview-use/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;随着手机性能的提高，以及iOS和Android两个平台的普及，更多的App都会选择两个平台的App都进行开发，在有些时候，为了更加快速的开发，我们会采用hybird方式开发，这个时候我们需要使用webview并且自己进行一些配置。Android的webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了chrome，因此问题很多，这里分享一些我使用过程的一些技巧和遇到的坑。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>改变support中AlertDialog的样式</title>
      <link>https://isming.me/2015-08-31-modify-alert-style/</link>
      <pubDate>Mon, 31 Aug 2015 19:57:15 +0800</pubDate>
      
      <guid>https://isming.me/2015-08-31-modify-alert-style/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;android最近的support库提供了AlertDialog，可以让我们在低于5.0的系统使用到跟5.0系统一样的Material Design风格的对话框，但是使用了一段时间想到一些办法去改变对话框按钮字体的颜色，都不生效。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>一个上传apk到fir的gradle插件</title>
      <link>https://isming.me/2015-08-01-gradle-fir-plugin/</link>
      <pubDate>Sat, 01 Aug 2015 23:19:07 +0800</pubDate>
      
      <guid>https://isming.me/2015-08-01-gradle-fir-plugin/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;声明，这不是广告，没有任何利益瓜葛。&lt;/p&gt;
&lt;p&gt;App内测需要把安装把安装包放在一个地方进行托管，方便内测人员下载。国内有蒲公英，fir，等等这些网站可以用。&lt;/p&gt;
&lt;p&gt;最近fir上了新版本了，上了新的api，新界面，本以为它们会提供gradle的上传工具，结果没有，而且它们新版本还不好用，原本的下载统计浏览统计都没有了，结果上传很慢，甚至上传不了，我便写了一个gradle的上传工具。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Android应用使用自定义字体的一些探究</title>
      <link>https://isming.me/2015-07-07-android-custom-font/</link>
      <pubDate>Tue, 07 Jul 2015 19:04:22 +0800</pubDate>
      
      <guid>https://isming.me/2015-07-07-android-custom-font/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;最近团队里面在做程序界面统一的工作，因此希望统一字体，接到一个研究怎么自定义字体的任务。因为我们的开发模式，所以需要研究在界面内的字体自定义，以及webview的显示中的字体自定义。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>图片贴纸旋转缩放功能的实现</title>
      <link>https://isming.me/2015-05-10-sticker-view/</link>
      <pubDate>Sun, 10 May 2015 22:55:04 +0800</pubDate>
      
      <guid>https://isming.me/2015-05-10-sticker-view/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;我们的项目包含图片编辑功能，特别是包含图片添加水印贴纸的功能，从最初的简单版可以添加一个图片并且移动位置，到现在添加的图片可以进行移动，以及缩放，旋转，已经是和其他的图片处理可以达到一样的很好的效果了。一直想要整理一下，分享一下实现的改进过程，一直没空，也由于我过于懒，没有动笔。今天正好有时间，分享一下。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>打破Android应用65K方法数魔咒</title>
      <link>https://isming.me/2015-05-01-android-multi-dex/</link>
      <pubDate>Fri, 01 May 2015 00:33:08 +0800</pubDate>
      
      <guid>https://isming.me/2015-05-01-android-multi-dex/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;近日，我们的应用，在编译的时候不幸的遇到这个错误&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这才让我意识到原来我们的程序中，方法数已经超过了65536。在之前，已经知道了android系统的java虚拟机dalvik在执行java程序时，使用原生类型short来索引dex文件中的方法，因此方法数就呗限制在65536了。之前我一直以为，这个数量已经很大了，不会达到上限，结果今天就达到了。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>加速Android Studio/Gradle构建</title>
      <link>https://isming.me/2015-03-18-android-build-speed-up/</link>
      <pubDate>Wed, 18 Mar 2015 22:56:10 +0800</pubDate>
      
      <guid>https://isming.me/2015-03-18-android-build-speed-up/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;已经使用Android Studio进行开发超过一年，随着项目的增大，依赖库的增多，构建速度越来越慢，现在最慢要6分钟才能build一个release的安装包，在网上查找资料，发现可以通过一些配置可以加快速度，这里跟大家分享一下。&lt;/p&gt;
&lt;h3 id=&#34;开启gradle单独的守护进程&#34;&gt;开启gradle单独的守护进程&lt;/h3&gt;
&lt;p&gt;在下面的目录下面创建&lt;code&gt;gradle.properties&lt;/code&gt;文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/home/&amp;lt;username&amp;gt;/.gradle/&lt;/code&gt; (Linux)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/Users/&amp;lt;username&amp;gt;/.gradle/&lt;/code&gt; (Mac)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\.gradle&lt;/code&gt; (Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并在文件中增加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gradle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;daemon&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>java注解</title>
      <link>https://isming.me/2015-03-06-java-annotation/</link>
      <pubDate>Fri, 06 Mar 2015 00:19:19 +0800</pubDate>
      
      <guid>https://isming.me/2015-03-06-java-annotation/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;从java 5.0开始，为我们提供注解功能，通过注解可以限制代码的重载，过时，以及实现一些其他功能，这里，就来分析一下java的注解。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>android动画-View Animation</title>
      <link>https://isming.me/2015-02-01-android-view-animation/</link>
      <pubDate>Sun, 01 Feb 2015 11:10:50 +0800</pubDate>
      
      <guid>https://isming.me/2015-02-01-android-view-animation/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;视图动画（View Animation）,又称补间动画（Tween Animation）,即给出两个关键帧，通过一些算法将给定属性值在给定的时间内在两个关键帧间渐变。本文首先讲解各种基本动画的使用，其实介绍View动画的工作过程。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>android动画-Frame Animation</title>
      <link>https://isming.me/2015-01-28-android-frame-animation/</link>
      <pubDate>Wed, 28 Jan 2015 20:13:47 +0800</pubDate>
      
      <guid>https://isming.me/2015-01-28-android-frame-animation/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;动画可以在视觉上增加程序的流畅度，我之前对于动画这一块，是会用，但是不全面，这里写下博客，全面梳理一下Android动画方面的知识。当然，关于动画这块，也有很多前人写了很多内容，大家可以去参考。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>android反编译-如何防止反编译</title>
      <link>https://isming.me/2015-01-18-android-anti-decompile/</link>
      <pubDate>Sun, 18 Jan 2015 01:35:53 +0800</pubDate>
      
      <guid>https://isming.me/2015-01-18-android-anti-decompile/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;前面介绍了怎样去反编译别人的代码。哈哈，这里居然又写进行防止反编译。但是，还是先来写写吧。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>android反编译-smali语法</title>
      <link>https://isming.me/2015-01-14-android-decompile-smali/</link>
      <pubDate>Wed, 14 Jan 2015 23:52:44 +0800</pubDate>
      
      <guid>https://isming.me/2015-01-14-android-decompile-smali/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;前面我们有说过android反编译的工具，如何进行反编译。反编译后可以得到jar或者得到smali文件。Android采用的是java语言进行开发，但是Android系统有自己的虚拟机Dalvik,代码编译最终不是采用的java的class，而是使用的smali。我们反编译得到的代码，jar的话可能很多地方无法正确的解释出来，如果我们反编译的是smali则可以正确的理解程序的意思。因此，我们有必要熟悉smali语法。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>android反编译-反编译工具和方法</title>
      <link>https://isming.me/2015-01-11-android-decompile-tools/</link>
      <pubDate>Sun, 11 Jan 2015 22:19:17 +0800</pubDate>
      
      <guid>https://isming.me/2015-01-11-android-decompile-tools/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;开发过程中有些时候会遇到一些功能，自己不知道该怎么做，然而别的软件里面已经有了，这个时候可以采用反编译的方式，解开其他的程序，来了解一些它的做法，同时啊，还可以借鉴别人的软件结构，资源文件，等等，哈哈。那我就来讲解一些关于反编译相关的知识，主要分三篇，第一篇介绍反编译的工具和方法，第二篇，介绍smali的语法,第三篇介绍如何防止反编译，主要通过这几篇文章，了解如何去做反编译和代码加固。&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>android异步操作总结</title>
      <link>https://isming.me/2014-03-16-android-async-task/</link>
      <pubDate>Sun, 16 Mar 2014 16:18:25 +0800</pubDate>
      
      <guid>https://isming.me/2014-03-16-android-async-task/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Android中经常会有一些操作比如网络请求，文件读写，数据库操作，比较耗时，我们需要将其放在非UI线程去处理，此时，我们需要处理任务前后UI的变化和交互。我们需要通过类似js中异步请求处理，这里总结我所了解到的，方便自己记忆，也方便别人的浏览。&lt;/p&gt;
          
        
        </description>
    </item>
    
  </channel>
</rss>